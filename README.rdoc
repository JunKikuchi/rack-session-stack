= rack-session-stack

== Memcache から RAWS::SDB へフォールバック

セッション情報を書き込む場合は Memcache と RAWS::SDB へ書き込む。
セッション情報を読み込む場合は Memcache から読めれば Memcache のデータを使って、Memcache から読めなかったら RAWS::SDB から読み込む。

  require 'rubygems'
  require 'sinatra'
  require 'rack-session-stack'
  
  require 'raws'
  RAWS.aws_access_key_id = _AWS_ACCESS_KEY_ID_
  RAWS.aws_secret_access_key = _AWS_SECRET_ACCESS_KEY_
  RAWS::SDB.create_domain 'session'
  
  use Rack::Session::Stack,
    :stack => Rack::Session::Stack::Memcache.new(
      {:server => 'localhost:11211'},
      Rack::Session::Stack::RAWS::SDB.new(
        {:domain => 'session'}
      )
    )
  
  get '/' do
    if session['cnt']
      session['cnt'] += 1
    else
      session['cnt']  = 1
    end
  
    "cnt = #{session['cnt']}"
  end

= Memcache

  require 'rubygems'
  require 'sinatra'
  require 'rack-session-stack'
  
  use Rack::Session::Stack,
    :stack => Rack::Session::Stack::Memcache.new(
      {:server => 'localhost:11211'},
    )
  
  get '/' do
    if session['cnt']
      session['cnt'] += 1
    else
      session['cnt']  = 1
    end
  
    "cnt = #{session['cnt']}"
  end

== RAWS::SDB

  require 'rubygems'
  require 'sinatra'
  require 'rack-session-stack'
  
  require 'raws'
  RAWS.aws_access_key_id = _AWS_ACCESS_KEY_ID_
  RAWS.aws_secret_access_key = _AWS_SECRET_ACCESS_KEY_
  RAWS::SDB.create_domain 'session'
  
  use Rack::Session::Stack,
    :stack => Rack::Session::Stack::RAWS::SDB.new(
      {:domain => 'session'}
    )
  
  get '/' do
    if session['cnt']
      session['cnt'] += 1
    else
      session['cnt']  = 1
    end
  
    "cnt = #{session['cnt']}"
  end
